class Tree{constructor(a,b,c){this._trunkWidth=a,this._branchColor=b,this._leafColor=c}draw(a,b,c){this.context=a,this.context.fillStyle=this._branchColor,this._level(b,c,this._trunkWidth,0)}_level(a,b,c,d){if(12>d){const e=d+1,f=100/e,g=200/e,h=a+Math.random()*f,i=b-Math.random()*g,j=a-Math.random()*f,k=b-Math.random()*g;this._branch(a,b,h,i,c),this._branch(a,b,j,k,c);const l=.7*c;this._level(h,i,l,e),this._level(j,k,l,e)}else 12===d&&this._leaves(a,b,d)}_leaves(a,b,c){this.context.fillStyle=this._leafColor,this.context.beginPath(),this.context.arc(a,b,Math.random()*c+1,0,2*Math.PI),this.context.fillStyle=this._leafColor,this.context.fill()}_branch(a,b,c,d,e){this.context.beginPath(),this.context.moveTo(a+e/4,b),this.context.quadraticCurveTo(a+e/4,b-e,c,d),this.context.lineWidth=e,this.context.lineCap="round",this.context.stroke()}}class Forest{constructor(a,b,c){this._branchColor=a,this._leafColor=b,this._trunkWidth=c}draw(a,b){const c=a.getContext("2d"),d=c.createLinearGradient(0,0,0,a.height);d.addColorStop(0,"rgba(173,216,230,1)"),d.addColorStop(1,"rgba(255,165,0,1)"),this._background(c,d,a.width,a.height),this._fog=c.createLinearGradient(0,0,0,a.height),this._fog.addColorStop(0,"rgba(255,255,255,0.05)"),this._fog.addColorStop(1,"rgba(255,165,0,0.05)");for(let d=0;d<b;d++){const b=new Tree(this._trunkWidth,this._branchColor,this._leafColor);b.draw(c,a.width*Math.random(),a.height),this._background(c,this._fog,a.width,a.height)}}_background(a,b,c,d){a.fillStyle=b,a.fillRect(0,0,c,d)}}